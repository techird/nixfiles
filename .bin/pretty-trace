#!/usr/bin/python
# a tool to stat log file generated by strace -T or dtruss -e
# author: dccmx
import sys
import getopt


def usage():
    print 'Usage:'
    print sys.argv[0], '[options] log\n'
    print 'options'
    print '-t --type=strace|dtruss     type of trace tool'
    print '-s --sort=time|occur|name   sort result by time (default) or occurence'
    print '-i --ignore-time=N          ignore function call that costs N or more second time\n'
    sys.exit(0)


def strace_log(filename):
    for line in open(filename):
        try:
            l = line.split()
            f = l[0]
            t = l[-1]
            if not '(' in f or t == '...>': continue
            f = f[:f.find('(')]
            t = t[1:-2]
            t = float(t)
        except:
            continue
        yield (f, t)

def dtruss_log(filename):
    for line in open(filename):
        try:
            l = line.split()
            f = l[2]
            f = f[:f.find('(')].strip()
            t = float(l[1])
            if f == 'Err#3' or f == '': continue
        except:
            continue
        yield (f, t/1000000.0)


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 't:s:i:h', ['type=', 'sort=', 'ignore-time=', 'help'])
    except getopt.GetoptError, err:
        print str(err)
        usage()
    sortby = lambda d:d[1][1]
    reverse = True
    ignore_time = -1
    for o, v in opts:
        if o in ('-t', '--type'):
            if v == 'strace':
                trace_log = strace_log
            elif v == 'dtruss':
                trace_log = dtruss_log
            else:
                print 'invalid trace type'
                usage()
        elif o in ('-s', '--sort'):
            if v == 'occur':
                sortby = lambda d:d[1][0]
            elif v == 'name':
                sortby = lambda d:d[0]
                reverse = False
            elif not v == 'time':
                print 'invalid sort param'
                usage()
        elif o in ('-i', '--ignore-time'):
            ignore_time = int(v)
        elif o in ('-h', '--help'):
            usage()
    stat = {}
    for f, t in trace_log(args[0]):
        if ignore_time >= 0 and t >= ignore_time: continue
        if stat.has_key(f):
            stat[f][0] += 1
            stat[f][1] += t
        else:
            stat[f] = [1, t]
    for f, s in sorted(stat.items(), key = sortby, reverse=reverse):
        print f, s


if __name__ == '__main__':
    main()
